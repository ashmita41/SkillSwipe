# Generated by Django 5.2.3 on 2025-06-26 06:46

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('profiles', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='JobPosting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(help_text='Detailed job description')),
                ('job_type', models.CharField(choices=[('full-time', 'Full Time'), ('part-time', 'Part Time'), ('intern', 'Internship'), ('contract', 'Contract')], help_text='Type of employment', max_length=20)),
                ('work_mode', models.CharField(choices=[('remote', 'Remote'), ('in-office', 'In Office'), ('hybrid', 'Hybrid')], help_text='Work arrangement', max_length=20)),
                ('tech_stack', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), help_text='Required technologies and skills', size=None)),
                ('location', models.CharField(help_text='Job location', max_length=255)),
                ('salary_min', models.PositiveIntegerField(blank=True, help_text='Minimum salary range', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('salary_max', models.PositiveIntegerField(blank=True, help_text='Maximum salary range', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('experience_required', models.CharField(blank=True, choices=[('entry', 'Entry Level'), ('mid', 'Mid Level'), ('senior', 'Senior Level'), ('lead', 'Lead/Principal')], help_text='Required experience level', max_length=20, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('closed', 'Closed'), ('draft', 'Draft')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_postings', to='profiles.companyprofile')),
                ('created_by', models.ForeignKey(help_text='User who created this job posting', on_delete=django.db.models.deletion.CASCADE, related_name='created_jobs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'job_posting',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('saved_on', models.DateTimeField(auto_now_add=True)),
                ('job_post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlisted_by', to='jobs.jobposting')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'wishlist',
                'ordering': ['-saved_on'],
            },
        ),
        migrations.AddIndex(
            model_name='jobposting',
            index=models.Index(fields=['status', 'created_at'], name='idx_job_active'),
        ),
        migrations.AddIndex(
            model_name='jobposting',
            index=models.Index(fields=['company', 'status'], name='idx_job_company'),
        ),
        migrations.AddIndex(
            model_name='jobposting',
            index=models.Index(fields=['location', 'status'], name='idx_job_location'),
        ),
        migrations.AddIndex(
            model_name='wishlist',
            index=models.Index(fields=['user', 'saved_on'], name='idx_wishlist_user'),
        ),
        migrations.AlterUniqueTogether(
            name='wishlist',
            unique_together={('user', 'job_post')},
        ),
    ]
